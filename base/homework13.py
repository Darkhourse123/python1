#==========task3===========

# Задание 1. Работа с методами множеств
# Создайте два множества:

# • Множество A = {1, 2, 3, 4, 5}
# • Множество B = {4, 5, 6, 7, 8}

# Выполните следующие операции:

# 1. Добавьте элемент 10 в множество A.
# 2. Удалите элемент 4 из множества B.
# 3. Удалите случайный элемент из множества A с помощью метода pop и выведите его.
# 4. Обновите множество A элементами множества B с помощью метода update.
# 5. Найдите разность множеств A и B и выведите результат с помощью метода и с помощью специального оператора

# Изучите остальные методы, такие как: union, intersection, symmetric_difference, intersection_update, difference_update, symmetric_difference_update
A = {1, 2, 3, 4, 5}
B = {4, 5, 6, 7, 8}
A.add(10)
print(A)
B.remove(4)
print(B)
A.pop()
print(A)
A.update(B)
print(A)
print(A-B)
print(B-A)

#=============task2===============

# Задание 2. Проверка уникальности
# Напишите программу, которая принимает список чисел от пользователя (через пробел) и выводит только уникальные элементы в виде множества.

# Пример ввода:

# Введите числа: 1 2 3 4 4 5 1 2

# Пример вывода:

# Уникальные числа: {1, 2, 3, 4, 5}

int1 = 1,2,3,435,546,23,4,23423,1,1,1,1,2,2,23,333,3,4,44,5,5,66,67,7,7,8,8,9,90,9,8,7,6,5,54
print(set(int1))

#====================task3===========

# int2=input('Введите числа: ')
# int3=set(int2)
# print(int3)
# не знаю как сделать

#=================task4===========

# Задание 4. Методы index и count

# 1. Создайте кортеж numbers = (3, 6, 3, 7, 9, 3, 10).
# 2. Найдите индекс первого появления числа 7 с помощью метода index.
# 3. Подсчитайте, сколько раз число 3 встречается в кортеже с помощью метода count.

# Задание 5. Неизменяемость кортежа
# Создайте кортеж из пяти любых чисел. Напишите код, который пытается изменить одно из чисел (например, tuple[0] = 10). Запустите программу и объясните, что произошло, указав, почему возникает ошибка.
tuple1=(3,4,5,3,6,7,8,3,9,0,10,3,11,22,33,44,3,55,66,3,77,88,99,3)
print(tuple1.index(7))# 5
print(tuple1.count(3))# 7

#=============task5=========

# Доп задания на Цикл while

# Задание 1. Сумма чисел
# Напишите программу, которая запрашивает у пользователя числа, пока он не введет 0. Программа должна вычислить и вывести сумму всех введенных чисел (исключая 0).

# Пример работы программы:

# Введите число: 5
# Введите число: 3
# Введите число: -2
# Введите число: 0
# Сумма чисел: 6

# int1=input('Введите числа: ')
# for i in int1:
#     if i >= 0 and i<=0:
#         print(i)

#=====================task6====================

# Задание 2. Пароль

# Создайте программу, которая проверяет правильность ввода пароля. У пользователя есть 3 попытки для ввода.

# 1. Если пользователь вводит правильный пароль (например, “python123”), программа выводит сообщение:
# “Доступ разрешен.”
# и завершает выполнение.
# 2. Если пользователь вводит неправильный пароль, программа уменьшает количество оставшихся попыток и выводит сообщение:
# “Неверный пароль. Осталось попыток: X.”,
# где X — оставшееся количество попыток.
# 3. Если пользователь трижды ввел неверный пароль, программа выводит:
# “Попытки исчерпаны. Доступ запрещен.”
# и завершает выполнение.
# 4. Программа не дает выйти из цикла до тех пор, пока:
# • пользователь не введет правильный пароль, или
# • не исчерпает все попытки.

correct_password='darklight_123'
password=input('введите пароль: ')
attempts = 3
while password != correct_password:
    attempts -= 1
    if attempts == 0:
        print('попытки закончились')
        break
    else:
        password=input(f'введите пароль(попытки:{attempts}): ')
else:
    print('все верно')